package com.oracle.assessment.backend.service;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

public class CoinCalculatorService {
	// Coin denominations must be one of the following values
	private static final List<Double> ALLOWED_DENOMINATIONS = List.of(
		0.01, 0.05, 0.1, 0.2, 0.5, 1.0, 2.0, 5.0, 10.0, 50.0, 100.0, 1000.0
	);
	
	// Calculate the minimum number of coins
	public List<Double> calculateMinCoins(double targetAmount, List<Double> coinDenominations) {
		// Validate arguments
		if (targetAmount < 0 || targetAmount > 10000) {
			throw new IllegalArgumentException("Target amount must be between 0 and 10000");
		}
		
		for (double d : coinDenominations) {
			if (!ALLOWED_DENOMINATIONS.contains(d)) {
				throw new IllegalArgumentException("Invalid denomination: " + d);
			}
		}
		
		// Sort coin denominations in descending order for greedy approach
		List<Double> sortedDenominations = new ArrayList<>(coinDenominations);
		Collections.sort(sortedDenominations, Collections.reverseOrder());
		
		List<Double> result = new ArrayList<>();
		double remainingAmount = Math.round(targetAmount * 100); // Work in cents to avoid floating point issues
		
		
		// Add the biggest coin to result list for a given remaining amount to ensure minimum number of coins
		for (double coin : sortedDenominations) {
			long coinInCents = Math.round(coin * 100);
			while (remainingAmount >= coinInCents) {
				result.add(coin);
				remainingAmount -= coinInCents;
			}
		}
		
		// Throw an exception if remaining amount is still there after looping
		if (remainingAmount > 0) {
			throw new IllegalArgumentException("Target amount cannot be made with given coin denominations");
		}
		
		// Sort the result in ascending order
		Collections.sort(result);
		return result;
	}
		
}
